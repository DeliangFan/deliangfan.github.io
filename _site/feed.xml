<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>koala bear</title>
    <description>观水有术，必观其澜，日月有明，容光必照。
</description>
    <link>http://wsfdl.com/</link>
    <atom:link href="http://wsfdl.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 11 Dec 2015 16:17:51 +0800</pubDate>
    <lastBuildDate>Fri, 11 Dec 2015 16:17:51 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Nova是如何统计OpenStack资源</title>
        <description>&lt;hr /&gt;

&lt;h1 id=&quot;section&quot;&gt;引言&lt;/h1&gt;
&lt;p&gt;运维的同事常常遇到这么四个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nova 如何统计 OpenStack 计算资源？&lt;/li&gt;
  &lt;li&gt;为什么 free_ram_mb,  free_disk_gb 有时会是负数？&lt;/li&gt;
  &lt;li&gt;即使 free_ram_mb, free_disk_gb 为负，为什么虚拟机依旧能创建成功？&lt;/li&gt;
  &lt;li&gt;资源不足会导致虚拟机创建失败，但指定了 host 有时却能创建成功？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文以以上四个问题为切入点，结合 Kilo 版本 Nova 源码，在默认 Hypervisor 为 Qemu-kvm 的前提下(不同 Hypervisor 的资源统计方式差别较大 )，揭开 OpenStack 统计资源和资源调度的面纱。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;nova-&quot;&gt;Nova 需统计哪些资源&lt;/h1&gt;
&lt;p&gt;云计算的本质在于将硬件资源软件化，以达到快速按需交付的效果，最基本的计算、存储和网络基础元素并没有因此改变。就计算而言，CPU、RAM 和 DISK等依旧是必不可少的核心资源。&lt;/p&gt;

&lt;p&gt;从源码和数据库相关表可以得出，Nova 统计计算节点的四类计算资源：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU: 包括 vcpus(节点物理 cpu 总线程数),  vcpus_used(该节点虚拟机的 vcpu 总和)&lt;/li&gt;
  &lt;li&gt;RAM: 包括 memory_mb(该节点总 ram)，memory_mb_used(该节点虚拟机的 ram 总和)，free_ram_mb(可用 ram)
 Note: memory_mb = memory_mb_used + free_ram_mb&lt;/li&gt;
  &lt;li&gt;DISK：local_gb(该节点虚拟机的总可用 disk)，local_gb_used（该节点虚拟机 disk 总和），free_disk_gb(可用 disk)
 Note：local_gb = local_gb_used + free_disk_gb*&lt;/li&gt;
  &lt;li&gt;其它：PCI 设备、CPU 拓扑、NUMA 拓扑和 Hypervisor 等信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文重点关注 CPU、RAM 和 DISK 三类资源。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;nova--1&quot;&gt;Nova 如何收集资源&lt;/h1&gt;
&lt;p&gt;从 &lt;a href=&quot;https://github.com/openstack/nova/blob/master/nova/virt/libvirt/driver.py#L4878&quot;&gt;源码&lt;/a&gt;  可以看出，Nova 每分钟统计一次资源，方式如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU
    &lt;ul&gt;
      &lt;li&gt;vcpus: libvirt 中 get_Info()&lt;/li&gt;
      &lt;li&gt;vcpu_used: 通过 libvirt 中 dom.vcpus() 从而统计该节点上所有虚拟机 vcpu 总和&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RAM
    &lt;ul&gt;
      &lt;li&gt;memory: libvirt 中 get_Info()&lt;/li&gt;
      &lt;li&gt;memory_mb_used：先通过 /proc/meminfo 统计可用内存， 再用总内存减去可用内存得出&lt;strong&gt;(资源再统计时会重新计算该值)&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DISK
    &lt;ul&gt;
      &lt;li&gt;local_gb: os.statvfs(CONF.instances_path)&lt;/li&gt;
      &lt;li&gt;local_gb_used: os.statvfs(CONF.instances_path)&lt;strong&gt;(资源再统计时会重新计算该值)&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其它
    &lt;ul&gt;
      &lt;li&gt;hypervisor 相关信息：均通过 libvirt 获取&lt;/li&gt;
      &lt;li&gt;PCI: libvirt 中 listDevices(‘pci’, 0)&lt;/li&gt;
      &lt;li&gt;NUMA: livirt 中 getCapabilities()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么问题来了，按照上述收集资源的方式，free_ram_mb, free_disk_gb 不可能为负数啊！别急，Nova-compute 在上报资源至数据库前，还根据该节点上的虚拟机又做了一次资源统计。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;nova--2&quot;&gt;Nova 资源再统计&lt;/h1&gt;
&lt;p&gt;首先分析为什么需要再次统计资源以及统计哪些资源。从 &lt;a href=&quot;https://github.com/openstack/nova/blob/master/nova/compute/resource_tracker.py#L365&quot;&gt;源码&lt;/a&gt;  可以发现，Nova 根据该节点上的虚拟机再次统计了 RAM、DISK 和 PCI 资源。&lt;/p&gt;

&lt;p&gt;为什么需再次统计 RAM 资源？以启动一个 4G 内存的虚拟机为例，虚拟机启动前后，对比宿主机上可用内存，发现宿主机上的 free memory 虽有所减少(本次测试减少 600 MB)，却没有减少到 4G，如果虚拟机运行很吃内存的应用，可发现宿主机上的可用内存迅速减少 3G多。试想，以 64G 的服务器为例，假设每个 4G 内存的虚拟机启动后，宿主机仅减少 1G 内存，服务器可以成功创建 64 个虚拟机，但是当这些虚拟机在跑大量业务时，服务器的内存迅速不足，轻着影响虚拟机效率，重者导致虚拟机 shutdown等。除此以外，宿主机上的内存并不是完全分给虚拟机，系统和其它应用程序也需要内存资源。因此必须重新统计 RAM 资源，统计的方式为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;free_memory = total_memory - CONF.reserved_host_memory_mb - 虚拟机理论内存总和
CONF.reserved_host_memory_mb：内存预留，比如预留给系统或其它应用
虚拟机理论内存总和：即所有虚拟机 flavor 中的内存总和
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么要重新统计 DISK 资源？原因与 RAM 大致相同。为了节省空间， qemu-kvm 常用 &lt;a href=&quot;https://people.gnome.org/~markmc/qcow-image-format.html&quot;&gt;QCOW2&lt;/a&gt; 格式镜像，以创建 DISK 大小为 100G 的虚拟机为例，虚拟机创建后，其镜像文件往往只有几百 KB，当有大量数据写入时磁盘时，宿主机上对应的虚拟机镜像文件会迅速增大。而 os.statvfs 统计的是虚拟机磁盘当前使用量，并不能反映潜在使用量。因此必须重新统计 DISK 资源，统计的方式为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;free_disk_gb = local_gb - CONF.reserved_host_disk_mb / 1024 - 虚拟机理论磁盘总和
CONF.reserved_host_disk_mb：磁盘预留
虚拟机理论磁盘总和：即所有虚拟机  flavor 中得磁盘总和
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当允许资源超配(见下节)时，采用上述统计方式就有可能出现 free_ram_mb,  free_disk_gb 为负。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-1&quot;&gt;资源超配与调度&lt;/h1&gt;
&lt;p&gt;即使 free_ram_mb 或 free_disk_gb 为负，虚拟机依旧有可能创建成功。事实上，当 nova-scheduler 在调度过程中，某些 filter 允许资源超配，比如 CPU、RAM 和 DISK 等 filter，它们默认的超配比为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU: CONF.cpu_allocation_ratio = 16&lt;/li&gt;
  &lt;li&gt;RAM: CONF.ram_allocation_ratio = 1.5&lt;/li&gt;
  &lt;li&gt;DISK: CONF.disk_allocation_ratio = 1.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以 ram_filter 为例，在根据 RAM 过滤宿主机时，过滤的原则为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;memory_limit = total_memory * ram_allocation_ratio
used_memory = total_memory - free_memory
memory_limit - used_memory &amp;lt; flavor[&#39;ram&#39;]，表示内存不足，过滤该宿主机；否则保留该宿主机。 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相关代码如下(稍有精简)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def host_passes(self, host_state, instance_type):

    &quot;&quot;&quot;Only return hosts with sufficient available RAM.&quot;&quot;&quot;

    requested_ram = instance_type[&#39;memory_mb&#39;]
    free_ram_mb = host_state.free_ram_mb
    total_usable_ram_mb = host_state.total_usable_ram_mb

    memory_mb_limit = total_usable_ram_mb * CONF.ram_allocation_ratio
    used_ram_mb = total_usable_ram_mb - free_ram_mb
    usable_ram = memory_mb_limit - used_ram_mb

    if not usable_ram &amp;gt;= requested_ram:
        LOG.debug(&quot;host does not have requested_ram&quot;)
        return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;宿主机 RAM 和 DISK 的使用率往往要小于虚拟机理论使用的 RAM 和 DISK，在剩余资源充足的条件下，libvirt 将成功创建虚拟机。&lt;/p&gt;

&lt;p&gt;随想：内存和磁盘超配虽然能提供更多数量的虚拟机，当该宿主机上大量虚拟机的负载都很高时，轻着影响虚拟机性能，重则引起 qemu-kvm  相关进程被杀，即虚拟机被关机。因此对于线上稳定性要求高的业务，建议不要超配 RAM 和 DISK，但可适当超配 CPU。建议这几个参数设置为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU: CONF.cpu_allocation_ratio = 4&lt;/li&gt;
  &lt;li&gt;RAM: CONF.ram_allocation_ratio = 1.0&lt;/li&gt;
  &lt;li&gt;DISK: CONF.disk_allocation_ratio = 1.0&lt;/li&gt;
  &lt;li&gt;RAM-Reserve: CONF.reserved_host_memory_mb = 2048&lt;/li&gt;
  &lt;li&gt;DISK-Reserve: CONF.reserved_host_disk_mb = 20480&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;host-&quot;&gt;指定 host 创建虚拟机&lt;/h1&gt;
&lt;p&gt;本节用于回答问题四，当所有宿主机的资源使用过多，即超出限定的超配值时(total_resource * allocation_ratio)，nova-scheduler 将过滤这些宿主机，若未找到符合要求的宿主机，虚拟机创建失败。&lt;/p&gt;

&lt;p&gt;创建虚拟机的 API 支持指定 host 创建虚拟机，指定 host 时，nova-scheduler 采取特别的处理方式：不再判断该 host 上的资源是否满足需求，而是直接将请求发给该 host 上的 nova-compute。
相关代码如下(稍有精简)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def get_filtered_hosts(self, hosts, filter_properties,
            filter_class_names=None, index=0):
    &#39;&#39;&#39;Filter hosts and return only ones passing all filters.&#39;&#39;&#39;
    ...
    if ignore_hosts or force_hosts or force_nodes:
        ...
        if force_hosts or force_nodes:
            # NOTE(deva): Skip filters when forcing host or node
            if name_to_cls_map:
                return name_to_cls_map.values()

        return self.filter_handler.get_filtered_objects()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当该 host 上实际可用资源时满足要求时，libvirt 依旧能成功创建虚拟机。最后，一图蔽之
 &lt;img src=&quot;http://img.blog.csdn.net/20150501235350782&quot; alt=&quot;这里写图片描述&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://wsfdl.com/openstack/2015/12/11/Nova%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1OpenStack%E8%B5%84%E6%BA%90.html</link>
        <guid isPermaLink="true">http://wsfdl.com/openstack/2015/12/11/Nova%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1OpenStack%E8%B5%84%E6%BA%90.html</guid>
        
        
        <category>OpenStack</category>
        
      </item>
    
      <item>
        <title>一次批量重启引发的网络故障</title>
        <description>&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;现场回顾&lt;/h3&gt;
&lt;p&gt;故事发生于某个下午，采用 salt 更新某集群的 neutron.conf (log 相关配置项) 并批量重启 neutron-openvswitch-agent(以下简称 neutron-ovs-agent)，不久便有人反馈云主机宕机。&lt;/p&gt;

&lt;p&gt;立即排查发现云主机并没有宕机，只是网络不通，大部分计算节点的 ovs 流表空空如也。Nova 和 Neutron 打出 ERROR 级别的日志。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ ovs-ofctl dump-flows br-bond1
NXST_FLOW repy (xid=0x4)
 cookies=0x0, duration=433.691s, table=0, n_packages=568733, n_bytes=113547542, idle_age=0, priority=1 actions=NORMAL
 cookies=0x0, duration=432.358s, table=0, n_packages=8418, n_bytes=356703, idle_age=0, priority=2, in_port=3 actions=drop&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;neutron-ovs-agent Log:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DeviceListRetrievalError: Unable to retrieve port details for devices because of error: Remote error: TimeoutError QueuePool limit of size 10 overflow 20 reached, connection timed out, timeout 10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;neutron-server Log：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;File “/usr/lib64/python2.6/site-packages/sqlalchemy/pool.py”, … ‘TimeoutError: QueuePool limit of size 10 overflow 20 reached, connection timed out, timeout 10\n’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;nova Log：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NeutronClientException: Request Failed: internal server error while processing your request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上述信息可得出以下结论：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Neutron 日志表明 neutron-ovs-agent 通过 rpc 向 neutron-server 请求虚拟机 port 相关信息失败，失败的原因是 neutron-server 和数据库的连接数超出连接池的上限。&lt;/li&gt;
  &lt;li&gt;Nova 日志表明 neutron-server 无法响应 HTTP 请求。&lt;/li&gt;
  &lt;li&gt;被清空的 ovs 流表导致虚拟机的网络瘫痪。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;导火索&lt;/h3&gt;
&lt;p&gt;深入剖析之前，先了解该 Icehouse 集群的基本信息：该集群有 102 个计算节点，运行着 nova, neutron, glance，ceilometer 等服务，为了避免单点故障，我们去除了 neutron l3 等相关服务，采用大二层的网络，虚拟机通过物理路由与外界通信。理论上说，无论哪个服务异常，甚至任意节点宕机，最差的结果是 openstack 服务不可用或者少量虚拟机故障，但绝大部分虚拟机依旧能正常运行。&lt;/p&gt;

&lt;p&gt;经验告知，采用以上网络模型的多个集群一年多以来从未发生如此规模的故障。由于 log 模块配置项根本不会影响，直觉上推测批量重启可能是触发 ovs 流表被清空的导火索。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;neutron-&quot;&gt;Neutron 的一个坑&lt;/h3&gt;

&lt;p&gt;由于流表被清空前仅仅重启了 neutron-openvs-agent，而计算节点，仅仅只有 neutron-ovs-agent 与 ovs 有交互，故按图索骥的浏览 neutron-ovs-agent 重启流程，梳理其逻辑如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;清除所有流表&lt;/li&gt;
  &lt;li&gt;通过 rpc 向 neutron-server 获取流表相关信息&lt;/li&gt;
  &lt;li&gt;创建新流变&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不难发现，如果步骤 2 异常，比如 neutron-server 繁忙，消息中间件异常和数据库异常等种种因素，都会影响流表的重建，重则导致虚拟机网络瘫痪。事实上，社区也意识到了类似的问题：重启 neutron-ovs-agent 会导致网络暂时中断。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bugs.launchpad.net/neutron/+bug/1383674&quot;&gt;Restarting neutron ovs agent causes network hiccup by throwing away all flows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;社区的处理方式是增加配置项 drop_flows_on_start，默认其值为 False，从而避免上述问题。该 &lt;a href=&quot;https://review.openstack.org/#/c/182920&quot;&gt;Patch&lt;/a&gt; 已合入 Liberty，梳理其重启的逻辑流程如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用一个 cookie 标志当前流表&lt;/li&gt;
  &lt;li&gt;获取新流变并更新至 ovs&lt;/li&gt;
  &lt;li&gt;根据 cookie 清除旧流表&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;neutron-ovs-agent 在重启的过程中就流表的处理留下了一个隐患，直接的后果就是导致计算节点的流表被清理的干干净净，虚拟机成一个个孤立的点，而多种因素可触发该隐患。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;最大连接数&lt;/h3&gt;

&lt;p&gt;现在解释为什么批量重启 neutron-ovs-agent 会触发上述隐患，重启过程中，neutron 日志报出如下错误：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘TimeoutError: QueuePool limit of size 10 overflow 20 reached, connection timed out, timeout。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这条日志意味着 neutron-server 和数据库的连接数超出客户端连接池的上限，当 neutron-ovs-agent 批量重启时，上百并发的通过 rpc 向 neutron-server 请求构建流表的相关信息，neutron-server 和数据库的连接数也就远远超过 30，造成大量的请求失败，计算节点获取不到流表相关信息无法重建流表，故计算节点的流表为空。&lt;/p&gt;

&lt;p&gt;要解决因 QueuePool 的限制而引起的 TimeoutError 问题也很简单，sqlalchemy 提供了两个配置项[1]，把下面两个参数适当调大即可。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[database] &lt;br /&gt;
max_overflow = &lt;br /&gt;
max_pool_size =&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; MySQL server 默认最大连接数为 100，当集群的规模上升时，需适当调整 MySQL server 最大连接数。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;进程的性能问题&lt;/h3&gt;

&lt;p&gt;然而问题并没有完全解决，请注意 nova 的错误日志：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;nova.compute.manager  NeutronClientException: Request Failed: internal server error while processing your request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是nova 发给 neutron-server 的一条 HTTP 请求，neutron 返回了 internal server error。Internal server error 对应的 HTTP status code 为 500，意味着 neutron-server 无法响应 nova 请求。为什么会无法响应呢，批量重启的过程中，发现 neutron-server 进程的 CPU 使用率为 100 %，意味着 neutron-server 正忙于处理 neutron-ovs-agent 大量的请求，因而无暇处理 nova 的 HTTP 请求。&lt;/p&gt;

&lt;p&gt;解决该问题的方法同样很简答，增加更多的 neutron-server 进程数即可。事实上，因 nova-conductor 要处理 nova-compute 大量的 rpc 请求(nova-compute 通过 nova-conductor 访问数据库)，自 Icehouse 起，nova-conductor 就默认启动了多个进程，进程的数目等同服务器 CPU 的逻辑核数。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$ workers=`cat /proc/cpuinfo |grep processor |wc | awk ‘{print $1}’`&lt;/p&gt;

  &lt;p&gt;[DEFAULT] &lt;br /&gt;
api_workers = $workers &lt;br /&gt;
rpc_workers = $workers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;python---io&quot;&gt;Python 的并发 &amp;amp; IO&lt;/h3&gt;

&lt;p&gt;值得思考的是，对双路 12 核共 24 线程的服务器来说，数百并发请求真的算高么？neutron-server 进程的 CPU 最大使用率只能到达 100 %，意味着 neutron-server 仅仅利用了服务器的一个线程。这里不得不提协程(crontine)[2]，这种伪并发的“用户态线程” 意味着任意时刻只有一个协程在执行，即任意时刻只能利用服务器 CPU 的一个线程，而 openstack 所有组件的进程里满满都是协程(只有一个主线程)，因而单个进程下，neutron-server 不能充分利用多核的优势以提高处理并发的能力。&lt;/p&gt;

&lt;p&gt;传统的 web 服务器 apache 和 nginx 利用多进程多线程提高并发数(上下文切换的开销：进程 &amp;gt; 线程 &amp;gt; 协程)。那么问题来了，单进程条件下，是不是可以用线程替换协程从而提高 neutron 的并发能力呢？真实的答案是 No, 根本原因在于 python GIL[3]，俗称 python 全局锁。对于 python 的程序来说，单进程只能在任何时刻只能占用一个物理线程，所有只有多进程才能充分利用服务器的多核多线程。&lt;/p&gt;

&lt;p&gt;让我们深入一点，假设的 CPU 足够强大，是不是可以解决 neutron-server 单进程的并发问题呢？我觉得未必，这又回到了 IO 问题。Monkey patch[4] 虽然把系统的 socket 库替换成自己提供的非阻塞 socket 库，从而避免某些阻塞 IO 阻塞了整个进程(主线程)。但是 OpenStack 访问 MySQL 使用的是 libmysqlclient 库，eventlet 并不能对这个使用了系统 socket 的 C 库使用 monky_patch，所以对 MySQL CRUD 的时候会阻塞主线程，意味着 neutron-server 在访问数据库也容易出现性能瓶颈。&lt;/p&gt;

&lt;p&gt;解决上诉并发问题的方法之一就是启动更多的 api worker 和 rpc worker。在较新的版本，OpenStack 默认的 wokers 就是服务器的逻辑核数。另外一种办法是用 apache 替换 python http server，最近各个组件逐步提供了对 apache 的支持。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.sqlalchemy.org/en/rel_0_9/core/pooling.html&quot;&gt;http://docs.sqlalchemy.org/en/rel_0_9/core/pooling.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dabeaz.com/coroutines/Coroutines.pdf&quot;&gt;http://www.dabeaz.com/coroutines/Coroutines.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1294382/what-is-a-global-interpreter-lock-gil&quot;&gt;http://stackoverflow.com/questions/1294382/what-is-a-global-interpreter-lock-gil&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11977270/monkey-patching-in-python-when-we-need-it&quot;&gt;http://stackoverflow.com/questions/11977270/monkey-patching-in-python-when-we-need-it&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 10 Dec 2015 16:00:00 +0800</pubDate>
        <link>http://wsfdl.com/openstack/2015/12/10/%E4%B8%80%E6%AC%A1%E6%89%B9%E9%87%8F%E9%87%8D%E5%90%AF%E5%BC%95%E5%8F%91%E7%9A%84%E7%BD%91%E7%BB%9C%E6%95%85%E9%9A%9C.html</link>
        <guid isPermaLink="true">http://wsfdl.com/openstack/2015/12/10/%E4%B8%80%E6%AC%A1%E6%89%B9%E9%87%8F%E9%87%8D%E5%90%AF%E5%BC%95%E5%8F%91%E7%9A%84%E7%BD%91%E7%BB%9C%E6%95%85%E9%9A%9C.html</guid>
        
        
        <category>OpenStack</category>
        
      </item>
    
  </channel>
</rss>
