---
layout: post
title:  "理解 CPU Cache"
categories: Linux
---

下列两个循环哪个快？

~~~ c
int array[1024][1024]

// Loop 1
for(int i = 0; i < 1024; i ++)
    for(int j = 0; j < 1024; j ++)
        array[i][j] ++;

// Loop 2
for(int i = 0; i < 1024; i ++)
    for(int j = 0; j < 1024; j ++)
        array[j][i] ++;
~~~

Loop 1 的 CPU cache 命中率高，所以它比 Loop 2 约快八倍！

[Gallery of Processor Cache Effects](http://igoro.com/archive/gallery-of-processor-cache-effects/) 用 7 个源码示例生动的展示 cache，深入浅出！但是可能因操作系统的差异、编译器是否优化，以及近些年 cache 性能的提升，前 3 个样例在本人的 Macbook 中效果与原文相差较大。另外 Berkeley 公开课 [CS162](cs162.eecs.berkeley.edu) 图文并茂，非常推荐。本文充当搬运工的角色，集二者之精华科普 CPU cache 知识。 


----

# What is Cache

维基百科是这样定义的：在计算机系统中，[CPU cache（中文简称缓存）](https://zh.wikipedia.org/wiki/CPU%E7%BC%93%E5%AD%98)是用于减少处理器访问内存所需平均时间的部件。在金字塔式存储体系中它位于自顶向下的第二层，仅次于 CPU 寄存器。其容量远小于内存，但速度却可以接近处理器的频率。

![hierarchy](http://7xp2eu.com1.z0.glb.clouddn.com/hierarchy%20cache.png)

CPU 访问内存时，首先查询 cache 是否已缓存该数据。如果有 (hit)，则返回该数据，无需访问内存；如果不存在 (miss)，则需把该数据从内存中载入 cache，最后返回给理器。在处理器看来，缓存是一个透明部件，旨在提高处理器访问数据的速率，所以从逻辑的角度而言，编程时无需关注它，但是从性能的角度而言，理解其原理和机制有助于写出性能更好的程序。Cache 之所以有效，是因为程序对内存的访问存在一种概率上的局部特征：

- Spatial Locality：对于刚被访问的数据，其相邻的数据在将来被访问的概率高。
- Temporal Locality：对于刚被访问的数据，其本身在将来被访问的概率高。

从广义的角度而言，cache 可以分为两类：

- 数据(指令) cache: 缓存内存数据，如果 miss，CPU 需访内存获取数据(指令)。 
- TLB(Translation lookaside buffer): 寻址 cache，缓存进程虚拟机地址和物理地址的映射关系，如果 miss，MMU 需多次访问内存获取多级 page table 才能计算出物理地址。

比 Macbook 为例，可用 sysctl 查询 cache 信息。

~~~ bash
$ sysctl -a

hw.cachelinesize: 64
hw.l1icachesize: 32768
hw.l1dcachesize: 32768
hw.l2cachesize: 262144
hw.l3cachesize: 3145728
machdep.cpu.cache.L2_associativity: 8
machdep.cpu.core_count: 2
machdep.cpu.thread_count: 4
machdep.cpu.tlb.inst.large: 8
machdep.cpu.tlb.data.small: 64
machdep.cpu.tlb.data.small_level1: 64
machdep.cpu.tlb.shared: 1024
~~~

如下图：

![cpu cache](http://7xp2eu.com1.z0.glb.clouddn.com/mac_cpu_cache_info.png)


---

# Why Cache


![history](http://7xp2eu.com1.z0.glb.clouddn.com/cpu_ram_rate.png)

以上是 20 年来 CPU 和 RAM 主频的增长率


- Present as much memory as in the cheapest technology
- Provide access at speed offered by the fastest technology



# Understand Cache With Some Cases


Loop 1 访问的数据在地址空间上是相邻的，相邻的数据通常一起存放在 cache 中，cache 命中率高，耗时少。





