---
layout: post
title:  "理解 CPU Cache"
categories: Linux
---

下列两个循环哪个快？

~~~ c
int array[1024][1024]

// Loop 1
for(int i = 0; i < 1024; i ++)
    for(int j = 0; j < 1024; j ++)
        array[i][j] ++;

// Loop 2
for(int i = 0; i < 1024; i ++)
    for(int j = 0; j < 1024; j ++)
        array[j][i] ++;
~~~

Loop 1 的 cache 命中率高，所以它比 Loop 2 约快八倍！

# What is Cache

在计算机系统中，CPU高速缓存（英语：CPU Cache，在本文中简称缓存）是用于减少处理器访问内存所需平均时间的部件。在金字塔式存储体系中它位于自顶向下的第二层，仅次于CPU寄存器。其容量远小于内存，但速度却可以接近处理器的频率。

当处理器发出内存访问请求时，会先查看缓存内是否有请求数据。如果存在（命中），则不经访问内存直接返回该数据；如果不存在（失效），则要先把内存中的相应数据载入缓存，再将其返回处理器。

缓存之所以有效，主要是因为程序运行时对内存的访问呈现局部性（Locality）特征。这种局部性既包括空间局部性（Spatial Locality），也包括时间局部性（Temporal Locality）。有效利用这种局部性，缓存可以达到极高的命中率。

在处理器看来，缓存是一个透明部件。因此，程序员通常无法直接干预对缓存的操作。但是，确实可以根据缓存的特点对程序代码实施特定优化，从而更好地利用缓存。

~~~
$ sysctl -a
hw.cachelinesize: 64
hw.l1icachesize: 32768
hw.l1dcachesize: 32768
hw.l2cachesize: 262144
hw.l3cachesize: 3145728
machdep.cpu.core_count: 2
machdep.cpu.thread_count: 4
~~~

![cpu cache](http://7xp2eu.com1.z0.glb.clouddn.com/mac_cpu_cache_info.png)

# Why Cache

Loop 1 访问的数据在地址空间上是相邻的，相邻的数据通常一起存放在 cache 中，cache 命中率高，耗时少。

![history](http://7xp2eu.com1.z0.glb.clouddn.com/cpu_ram_rate.png)

以上是 20 年来 CPU 和 RAM 主频的增长率

![hierarchy](http://7xp2eu.com1.z0.glb.clouddn.com/hierarchy%20cache.png)

- Present as much memory as in the cheapest technology
- Provide access at speed offered by the fastest technology



# Understand Cache With Some Cases







