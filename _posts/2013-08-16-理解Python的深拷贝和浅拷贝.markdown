---
layout: post
title:  "理解 Python 引用、浅拷贝和深拷贝"
categories: Python
---

![object](http://7xp2eu.com1.z0.glb.clouddn.com/pythonobjectmutable.png)

在阐述引用、浅拷贝和深拷贝前，首先需要要了解 Python 的世界里，一切皆对象，每个对象各包含一个 idendity、type 和 value。

- 引用(Reference)
- 浅拷贝(Shallow copy)
- 深拷贝(Deep copy)

------------------------

# Reference

![reference](http://7xp2eu.com1.z0.glb.clouddn.com/copy_reference.png)

~~~ bash
>>> a = [1 , 2]
>>> b = [a, 3, 4]
>>>
>>> c = b
>>> print c
[[1, 2], 3, 4]
>>> id(b)
4408148552
>>> id(c)
4408148552
~~~

c = b 表示 c 和 b 指向相同的地址空间，并没有创建新的对象。

------------------------

# Shallow Copy

![shadow copy](http://7xp2eu.com1.z0.glb.clouddn.com/copy_shallow_copy.png)

~~~ bash
>>> import copy
>>> d = copy.copy(b)
>>> print d
[[1, 2], 3, 4]
>>>
>>> id(b)
4408148552
>>> id(d)
4408199792
>>>
>>> id(b[0])
4408022944
>>> id(d[0])
4408022944
>>>
>>> d[0][0] = 5
>>> print b
>>> [[5, 2], 3, 4]
~~~

d = copy.copy(b) 创建了一个新对象，复制了原有对象的引用。

------------------------

# Deepcopy

![deepcopy](http://7xp2eu.com1.z0.glb.clouddn.com/copy_deepcopy.png)

~~~ bash
>>> e = copy.deepcopy(b)
>>> print e
>>> [[1, 2], 3, 4]
>>>
>>> id(b)
>>> 4408148552
>>> id(e)
>>> 4408394792
>>>
>>> id(b[0])
>>> 4408022944
>>> id(e[0])
>>> 4408398432
>>>
>>> e[0][0] = 5
>>> print b
>>> [[1, 2], 3, 4]
~~~

e = copy.deepcopy(b) 新建了一个新对象，完整的在内存中复制原有对象。

# Note

关于浅拷贝和深拷贝的区别，Python 的 [document](https://docs.python.org/2/library/copy.html) 是这样解释的:

The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):

- A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.
- A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.

使用深拷贝时，需要注意以下两个问题:

- 递归对象拷贝: Recursive objects (compound objects that, directly or indirectly, contain a reference to themselves) may cause a recursive loop.
- 大对象拷贝: Because deep copy copies everything it may copy too much, e.g., administrative data structures that should be shared even between copies.

